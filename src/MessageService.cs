/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace org.mustbe.consulo.ant.core.message
{
  public partial class MessageService {
    public interface Iface {
      void buildStarted(int priority);
      #if SILVERLIGHT
      IAsyncResult Begin_buildStarted(AsyncCallback callback, object state, int priority);
      void End_buildStarted(IAsyncResult asyncResult);
      #endif
      void buildFinished(int priority, string exceptionText);
      #if SILVERLIGHT
      IAsyncResult Begin_buildFinished(AsyncCallback callback, object state, int priority, string exceptionText);
      void End_buildFinished(IAsyncResult asyncResult);
      #endif
      void targetStarted(int priority, string name);
      #if SILVERLIGHT
      IAsyncResult Begin_targetStarted(AsyncCallback callback, object state, int priority, string name);
      void End_targetStarted(IAsyncResult asyncResult);
      #endif
      void targetFinished(int priority, string exceptionText);
      #if SILVERLIGHT
      IAsyncResult Begin_targetFinished(AsyncCallback callback, object state, int priority, string exceptionText);
      void End_targetFinished(IAsyncResult asyncResult);
      #endif
      void taskStarted(int priority, string name);
      #if SILVERLIGHT
      IAsyncResult Begin_taskStarted(AsyncCallback callback, object state, int priority, string name);
      void End_taskStarted(IAsyncResult asyncResult);
      #endif
      void taskFinished(int priority, string exceptionText);
      #if SILVERLIGHT
      IAsyncResult Begin_taskFinished(AsyncCallback callback, object state, int priority, string exceptionText);
      void End_taskFinished(IAsyncResult asyncResult);
      #endif
      void logInfo(int priority, string message);
      #if SILVERLIGHT
      IAsyncResult Begin_logInfo(AsyncCallback callback, object state, int priority, string message);
      void End_logInfo(IAsyncResult asyncResult);
      #endif
      void logError(int priority, string message);
      #if SILVERLIGHT
      IAsyncResult Begin_logError(AsyncCallback callback, object state, int priority, string message);
      void End_logError(IAsyncResult asyncResult);
      #endif
      void logException(int priority, string exceptionText);
      #if SILVERLIGHT
      IAsyncResult Begin_logException(AsyncCallback callback, object state, int priority, string exceptionText);
      void End_logException(IAsyncResult asyncResult);
      #endif
      string handleInputHandler(string prompt, string defaultValue, List<string> choices);
      #if SILVERLIGHT
      IAsyncResult Begin_handleInputHandler(AsyncCallback callback, object state, string prompt, string defaultValue, List<string> choices);
      string End_handleInputHandler(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_buildStarted(AsyncCallback callback, object state, int priority)
      {
        return send_buildStarted(callback, state, priority);
      }

      public void End_buildStarted(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_buildStarted();
      }

      #endif

      public void buildStarted(int priority)
      {
        #if !SILVERLIGHT
        send_buildStarted(priority);
        recv_buildStarted();

        #else
        var asyncResult = Begin_buildStarted(null, null, priority);
        End_buildStarted(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_buildStarted(AsyncCallback callback, object state, int priority)
      #else
      public void send_buildStarted(int priority)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("buildStarted", TMessageType.Call, seqid_));
        buildStarted_args args = new buildStarted_args();
        args.Priority = priority;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_buildStarted()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        buildStarted_result result = new buildStarted_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_buildFinished(AsyncCallback callback, object state, int priority, string exceptionText)
      {
        return send_buildFinished(callback, state, priority, exceptionText);
      }

      public void End_buildFinished(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_buildFinished();
      }

      #endif

      public void buildFinished(int priority, string exceptionText)
      {
        #if !SILVERLIGHT
        send_buildFinished(priority, exceptionText);
        recv_buildFinished();

        #else
        var asyncResult = Begin_buildFinished(null, null, priority, exceptionText);
        End_buildFinished(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_buildFinished(AsyncCallback callback, object state, int priority, string exceptionText)
      #else
      public void send_buildFinished(int priority, string exceptionText)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("buildFinished", TMessageType.Call, seqid_));
        buildFinished_args args = new buildFinished_args();
        args.Priority = priority;
        args.ExceptionText = exceptionText;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_buildFinished()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        buildFinished_result result = new buildFinished_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_targetStarted(AsyncCallback callback, object state, int priority, string name)
      {
        return send_targetStarted(callback, state, priority, name);
      }

      public void End_targetStarted(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_targetStarted();
      }

      #endif

      public void targetStarted(int priority, string name)
      {
        #if !SILVERLIGHT
        send_targetStarted(priority, name);
        recv_targetStarted();

        #else
        var asyncResult = Begin_targetStarted(null, null, priority, name);
        End_targetStarted(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_targetStarted(AsyncCallback callback, object state, int priority, string name)
      #else
      public void send_targetStarted(int priority, string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("targetStarted", TMessageType.Call, seqid_));
        targetStarted_args args = new targetStarted_args();
        args.Priority = priority;
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_targetStarted()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        targetStarted_result result = new targetStarted_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_targetFinished(AsyncCallback callback, object state, int priority, string exceptionText)
      {
        return send_targetFinished(callback, state, priority, exceptionText);
      }

      public void End_targetFinished(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_targetFinished();
      }

      #endif

      public void targetFinished(int priority, string exceptionText)
      {
        #if !SILVERLIGHT
        send_targetFinished(priority, exceptionText);
        recv_targetFinished();

        #else
        var asyncResult = Begin_targetFinished(null, null, priority, exceptionText);
        End_targetFinished(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_targetFinished(AsyncCallback callback, object state, int priority, string exceptionText)
      #else
      public void send_targetFinished(int priority, string exceptionText)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("targetFinished", TMessageType.Call, seqid_));
        targetFinished_args args = new targetFinished_args();
        args.Priority = priority;
        args.ExceptionText = exceptionText;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_targetFinished()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        targetFinished_result result = new targetFinished_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_taskStarted(AsyncCallback callback, object state, int priority, string name)
      {
        return send_taskStarted(callback, state, priority, name);
      }

      public void End_taskStarted(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_taskStarted();
      }

      #endif

      public void taskStarted(int priority, string name)
      {
        #if !SILVERLIGHT
        send_taskStarted(priority, name);
        recv_taskStarted();

        #else
        var asyncResult = Begin_taskStarted(null, null, priority, name);
        End_taskStarted(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_taskStarted(AsyncCallback callback, object state, int priority, string name)
      #else
      public void send_taskStarted(int priority, string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("taskStarted", TMessageType.Call, seqid_));
        taskStarted_args args = new taskStarted_args();
        args.Priority = priority;
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_taskStarted()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        taskStarted_result result = new taskStarted_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_taskFinished(AsyncCallback callback, object state, int priority, string exceptionText)
      {
        return send_taskFinished(callback, state, priority, exceptionText);
      }

      public void End_taskFinished(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_taskFinished();
      }

      #endif

      public void taskFinished(int priority, string exceptionText)
      {
        #if !SILVERLIGHT
        send_taskFinished(priority, exceptionText);
        recv_taskFinished();

        #else
        var asyncResult = Begin_taskFinished(null, null, priority, exceptionText);
        End_taskFinished(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_taskFinished(AsyncCallback callback, object state, int priority, string exceptionText)
      #else
      public void send_taskFinished(int priority, string exceptionText)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("taskFinished", TMessageType.Call, seqid_));
        taskFinished_args args = new taskFinished_args();
        args.Priority = priority;
        args.ExceptionText = exceptionText;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_taskFinished()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        taskFinished_result result = new taskFinished_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_logInfo(AsyncCallback callback, object state, int priority, string message)
      {
        return send_logInfo(callback, state, priority, message);
      }

      public void End_logInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_logInfo();
      }

      #endif

      public void logInfo(int priority, string message)
      {
        #if !SILVERLIGHT
        send_logInfo(priority, message);
        recv_logInfo();

        #else
        var asyncResult = Begin_logInfo(null, null, priority, message);
        End_logInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_logInfo(AsyncCallback callback, object state, int priority, string message)
      #else
      public void send_logInfo(int priority, string message)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("logInfo", TMessageType.Call, seqid_));
        logInfo_args args = new logInfo_args();
        args.Priority = priority;
        args.Message = message;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_logInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logInfo_result result = new logInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_logError(AsyncCallback callback, object state, int priority, string message)
      {
        return send_logError(callback, state, priority, message);
      }

      public void End_logError(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_logError();
      }

      #endif

      public void logError(int priority, string message)
      {
        #if !SILVERLIGHT
        send_logError(priority, message);
        recv_logError();

        #else
        var asyncResult = Begin_logError(null, null, priority, message);
        End_logError(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_logError(AsyncCallback callback, object state, int priority, string message)
      #else
      public void send_logError(int priority, string message)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("logError", TMessageType.Call, seqid_));
        logError_args args = new logError_args();
        args.Priority = priority;
        args.Message = message;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_logError()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logError_result result = new logError_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_logException(AsyncCallback callback, object state, int priority, string exceptionText)
      {
        return send_logException(callback, state, priority, exceptionText);
      }

      public void End_logException(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_logException();
      }

      #endif

      public void logException(int priority, string exceptionText)
      {
        #if !SILVERLIGHT
        send_logException(priority, exceptionText);
        recv_logException();

        #else
        var asyncResult = Begin_logException(null, null, priority, exceptionText);
        End_logException(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_logException(AsyncCallback callback, object state, int priority, string exceptionText)
      #else
      public void send_logException(int priority, string exceptionText)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("logException", TMessageType.Call, seqid_));
        logException_args args = new logException_args();
        args.Priority = priority;
        args.ExceptionText = exceptionText;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_logException()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logException_result result = new logException_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_handleInputHandler(AsyncCallback callback, object state, string prompt, string defaultValue, List<string> choices)
      {
        return send_handleInputHandler(callback, state, prompt, defaultValue, choices);
      }

      public string End_handleInputHandler(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_handleInputHandler();
      }

      #endif

      public string handleInputHandler(string prompt, string defaultValue, List<string> choices)
      {
        #if !SILVERLIGHT
        send_handleInputHandler(prompt, defaultValue, choices);
        return recv_handleInputHandler();

        #else
        var asyncResult = Begin_handleInputHandler(null, null, prompt, defaultValue, choices);
        return End_handleInputHandler(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_handleInputHandler(AsyncCallback callback, object state, string prompt, string defaultValue, List<string> choices)
      #else
      public void send_handleInputHandler(string prompt, string defaultValue, List<string> choices)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("handleInputHandler", TMessageType.Call, seqid_));
        handleInputHandler_args args = new handleInputHandler_args();
        args.Prompt = prompt;
        args.DefaultValue = defaultValue;
        args.Choices = choices;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_handleInputHandler()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        handleInputHandler_result result = new handleInputHandler_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "handleInputHandler failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["buildStarted"] = buildStarted_Process;
        processMap_["buildFinished"] = buildFinished_Process;
        processMap_["targetStarted"] = targetStarted_Process;
        processMap_["targetFinished"] = targetFinished_Process;
        processMap_["taskStarted"] = taskStarted_Process;
        processMap_["taskFinished"] = taskFinished_Process;
        processMap_["logInfo"] = logInfo_Process;
        processMap_["logError"] = logError_Process;
        processMap_["logException"] = logException_Process;
        processMap_["handleInputHandler"] = handleInputHandler_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void buildStarted_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        buildStarted_args args = new buildStarted_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        buildStarted_result result = new buildStarted_result();
        iface_.buildStarted(args.Priority);
        oprot.WriteMessageBegin(new TMessage("buildStarted", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void buildFinished_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        buildFinished_args args = new buildFinished_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        buildFinished_result result = new buildFinished_result();
        iface_.buildFinished(args.Priority, args.ExceptionText);
        oprot.WriteMessageBegin(new TMessage("buildFinished", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void targetStarted_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        targetStarted_args args = new targetStarted_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        targetStarted_result result = new targetStarted_result();
        iface_.targetStarted(args.Priority, args.Name);
        oprot.WriteMessageBegin(new TMessage("targetStarted", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void targetFinished_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        targetFinished_args args = new targetFinished_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        targetFinished_result result = new targetFinished_result();
        iface_.targetFinished(args.Priority, args.ExceptionText);
        oprot.WriteMessageBegin(new TMessage("targetFinished", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void taskStarted_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        taskStarted_args args = new taskStarted_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        taskStarted_result result = new taskStarted_result();
        iface_.taskStarted(args.Priority, args.Name);
        oprot.WriteMessageBegin(new TMessage("taskStarted", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void taskFinished_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        taskFinished_args args = new taskFinished_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        taskFinished_result result = new taskFinished_result();
        iface_.taskFinished(args.Priority, args.ExceptionText);
        oprot.WriteMessageBegin(new TMessage("taskFinished", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void logInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logInfo_args args = new logInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logInfo_result result = new logInfo_result();
        iface_.logInfo(args.Priority, args.Message);
        oprot.WriteMessageBegin(new TMessage("logInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void logError_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logError_args args = new logError_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logError_result result = new logError_result();
        iface_.logError(args.Priority, args.Message);
        oprot.WriteMessageBegin(new TMessage("logError", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void logException_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logException_args args = new logException_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logException_result result = new logException_result();
        iface_.logException(args.Priority, args.ExceptionText);
        oprot.WriteMessageBegin(new TMessage("logException", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void handleInputHandler_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        handleInputHandler_args args = new handleInputHandler_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        handleInputHandler_result result = new handleInputHandler_result();
        result.Success = iface_.handleInputHandler(args.Prompt, args.DefaultValue, args.Choices);
        oprot.WriteMessageBegin(new TMessage("handleInputHandler", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class buildStarted_args : TBase
    {
      private int _priority;

      public int Priority
      {
        get
        {
          return _priority;
        }
        set
        {
          __isset.priority = true;
          this._priority = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool priority;
      }

      public buildStarted_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Priority = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("buildStarted_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.priority) {
          field.Name = "priority";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Priority);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("buildStarted_args(");
        sb.Append("Priority: ");
        sb.Append(Priority);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class buildStarted_result : TBase
    {

      public buildStarted_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("buildStarted_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("buildStarted_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class buildFinished_args : TBase
    {
      private int _priority;
      private string _exceptionText;

      public int Priority
      {
        get
        {
          return _priority;
        }
        set
        {
          __isset.priority = true;
          this._priority = value;
        }
      }

      public string ExceptionText
      {
        get
        {
          return _exceptionText;
        }
        set
        {
          __isset.exceptionText = true;
          this._exceptionText = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool priority;
        public bool exceptionText;
      }

      public buildFinished_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Priority = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ExceptionText = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("buildFinished_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.priority) {
          field.Name = "priority";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Priority);
          oprot.WriteFieldEnd();
        }
        if (ExceptionText != null && __isset.exceptionText) {
          field.Name = "exceptionText";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ExceptionText);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("buildFinished_args(");
        sb.Append("Priority: ");
        sb.Append(Priority);
        sb.Append(",ExceptionText: ");
        sb.Append(ExceptionText);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class buildFinished_result : TBase
    {

      public buildFinished_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("buildFinished_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("buildFinished_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class targetStarted_args : TBase
    {
      private int _priority;
      private string _name;

      public int Priority
      {
        get
        {
          return _priority;
        }
        set
        {
          __isset.priority = true;
          this._priority = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool priority;
        public bool name;
      }

      public targetStarted_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Priority = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("targetStarted_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.priority) {
          field.Name = "priority";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Priority);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("targetStarted_args(");
        sb.Append("Priority: ");
        sb.Append(Priority);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class targetStarted_result : TBase
    {

      public targetStarted_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("targetStarted_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("targetStarted_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class targetFinished_args : TBase
    {
      private int _priority;
      private string _exceptionText;

      public int Priority
      {
        get
        {
          return _priority;
        }
        set
        {
          __isset.priority = true;
          this._priority = value;
        }
      }

      public string ExceptionText
      {
        get
        {
          return _exceptionText;
        }
        set
        {
          __isset.exceptionText = true;
          this._exceptionText = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool priority;
        public bool exceptionText;
      }

      public targetFinished_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Priority = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ExceptionText = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("targetFinished_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.priority) {
          field.Name = "priority";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Priority);
          oprot.WriteFieldEnd();
        }
        if (ExceptionText != null && __isset.exceptionText) {
          field.Name = "exceptionText";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ExceptionText);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("targetFinished_args(");
        sb.Append("Priority: ");
        sb.Append(Priority);
        sb.Append(",ExceptionText: ");
        sb.Append(ExceptionText);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class targetFinished_result : TBase
    {

      public targetFinished_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("targetFinished_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("targetFinished_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class taskStarted_args : TBase
    {
      private int _priority;
      private string _name;

      public int Priority
      {
        get
        {
          return _priority;
        }
        set
        {
          __isset.priority = true;
          this._priority = value;
        }
      }

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool priority;
        public bool name;
      }

      public taskStarted_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Priority = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("taskStarted_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.priority) {
          field.Name = "priority";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Priority);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("taskStarted_args(");
        sb.Append("Priority: ");
        sb.Append(Priority);
        sb.Append(",Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class taskStarted_result : TBase
    {

      public taskStarted_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("taskStarted_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("taskStarted_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class taskFinished_args : TBase
    {
      private int _priority;
      private string _exceptionText;

      public int Priority
      {
        get
        {
          return _priority;
        }
        set
        {
          __isset.priority = true;
          this._priority = value;
        }
      }

      public string ExceptionText
      {
        get
        {
          return _exceptionText;
        }
        set
        {
          __isset.exceptionText = true;
          this._exceptionText = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool priority;
        public bool exceptionText;
      }

      public taskFinished_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Priority = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ExceptionText = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("taskFinished_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.priority) {
          field.Name = "priority";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Priority);
          oprot.WriteFieldEnd();
        }
        if (ExceptionText != null && __isset.exceptionText) {
          field.Name = "exceptionText";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ExceptionText);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("taskFinished_args(");
        sb.Append("Priority: ");
        sb.Append(Priority);
        sb.Append(",ExceptionText: ");
        sb.Append(ExceptionText);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class taskFinished_result : TBase
    {

      public taskFinished_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("taskFinished_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("taskFinished_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logInfo_args : TBase
    {
      private int _priority;
      private string _message;

      public int Priority
      {
        get
        {
          return _priority;
        }
        set
        {
          __isset.priority = true;
          this._priority = value;
        }
      }

      public string Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool priority;
        public bool message;
      }

      public logInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Priority = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Message = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.priority) {
          field.Name = "priority";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Priority);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Message);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logInfo_args(");
        sb.Append("Priority: ");
        sb.Append(Priority);
        sb.Append(",Message: ");
        sb.Append(Message);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logInfo_result : TBase
    {

      public logInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logInfo_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logInfo_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logError_args : TBase
    {
      private int _priority;
      private string _message;

      public int Priority
      {
        get
        {
          return _priority;
        }
        set
        {
          __isset.priority = true;
          this._priority = value;
        }
      }

      public string Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool priority;
        public bool message;
      }

      public logError_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Priority = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Message = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logError_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.priority) {
          field.Name = "priority";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Priority);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Message);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logError_args(");
        sb.Append("Priority: ");
        sb.Append(Priority);
        sb.Append(",Message: ");
        sb.Append(Message);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logError_result : TBase
    {

      public logError_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logError_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logError_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logException_args : TBase
    {
      private int _priority;
      private string _exceptionText;

      public int Priority
      {
        get
        {
          return _priority;
        }
        set
        {
          __isset.priority = true;
          this._priority = value;
        }
      }

      public string ExceptionText
      {
        get
        {
          return _exceptionText;
        }
        set
        {
          __isset.exceptionText = true;
          this._exceptionText = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool priority;
        public bool exceptionText;
      }

      public logException_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Priority = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ExceptionText = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logException_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.priority) {
          field.Name = "priority";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Priority);
          oprot.WriteFieldEnd();
        }
        if (ExceptionText != null && __isset.exceptionText) {
          field.Name = "exceptionText";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ExceptionText);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logException_args(");
        sb.Append("Priority: ");
        sb.Append(Priority);
        sb.Append(",ExceptionText: ");
        sb.Append(ExceptionText);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logException_result : TBase
    {

      public logException_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("logException_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("logException_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class handleInputHandler_args : TBase
    {
      private string _prompt;
      private string _defaultValue;
      private List<string> _choices;

      public string Prompt
      {
        get
        {
          return _prompt;
        }
        set
        {
          __isset.prompt = true;
          this._prompt = value;
        }
      }

      public string DefaultValue
      {
        get
        {
          return _defaultValue;
        }
        set
        {
          __isset.defaultValue = true;
          this._defaultValue = value;
        }
      }

      public List<string> Choices
      {
        get
        {
          return _choices;
        }
        set
        {
          __isset.choices = true;
          this._choices = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool prompt;
        public bool defaultValue;
        public bool choices;
      }

      public handleInputHandler_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Prompt = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DefaultValue = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Choices = new List<string>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    string _elem2 = null;
                    _elem2 = iprot.ReadString();
                    Choices.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("handleInputHandler_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Prompt != null && __isset.prompt) {
          field.Name = "prompt";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Prompt);
          oprot.WriteFieldEnd();
        }
        if (DefaultValue != null && __isset.defaultValue) {
          field.Name = "defaultValue";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DefaultValue);
          oprot.WriteFieldEnd();
        }
        if (Choices != null && __isset.choices) {
          field.Name = "choices";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Choices.Count));
            foreach (string _iter3 in Choices)
            {
              oprot.WriteString(_iter3);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("handleInputHandler_args(");
        sb.Append("Prompt: ");
        sb.Append(Prompt);
        sb.Append(",DefaultValue: ");
        sb.Append(DefaultValue);
        sb.Append(",Choices: ");
        sb.Append(Choices);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class handleInputHandler_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public handleInputHandler_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("handleInputHandler_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("handleInputHandler_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
